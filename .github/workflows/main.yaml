name: Pepperoni Workflow
on:
  workflow_dispatch:

jobs:
  A_setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1 

  B_build: 
    needs: A_setup
    runs-on: ubuntu-latest
     
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init
      working-directory: WordPress Hosted on EC2

    - name: Terraform Format
      run: terraform fmt
      working-directory: WordPress Hosted on EC2

    - name: Terraform Validate
      run: terraform validate
      working-directory: WordPress Hosted on EC2

    - name: Terraform Plan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: terraform plan
      working-directory: WordPress Hosted on EC2

    - name: Terraform Apply
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: terraform apply -auto-approve -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: WordPress Hosted on EC2
        
    - name: Terraform Refresh
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: terraform refresh -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: WordPress Hosted on EC2
      
    - name: Terraform Output
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: |
        echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "bh_public_ip=$(terraform output -raw bh_public_ip)" >> $GITHUB_ENV
        echo "setup_server_private_key=$(terraform output -raw setup_server_private_key)" >> $GITHUB_ENV
      working-directory: WordPress Hosted on EC2

  C_install_gh_cli:
    needs: B_build
    runs-on: ubuntu-latest
    steps:
    - name: Install GitHub CLI
      run: |
        # Install GitHub CLI on the remote server
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
        sudo apt update
        sudo apt install gh

  D_authenticate_gh_cli:
    needs: C_install_gh_cli
    runs-on: ubuntu-latest
    steps:
    - name: Authenticate GitHub CLI
      run: |
        gh auth login --with-token <<< ${{ secrets.GH_TOKEN }}

  E_configure_EC2_instance:
    needs: D_authenticate_gh_cli
    runs-on: ubuntu-latest
    steps:
    - name: SSH into Setup Server and Configure EC2 Instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ needs.B_build.outputs.public_ip }}
        username: ec2-user
        key: ${{ needs.B_build.outputs.setup_server_private_key }}
        script: |
          sudo su
          yum update -y
          mkdir -p /var/www/html
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-03c9b3354880b36a6.efs.us-east-1.amazonaws.com:/ /var/www/html
          sudo yum install -y httpd httpd-tools mod_ssl
          sudo systemctl enable httpd
          sudo systemctl start httpd
          sudo amazon-linux-extras enable php7.4
          sudo yum clean metadata
          sudo yum install php php-common php-pear -y
          sudo yum install php-{cgi,curl,mbstring,gd,mysqlnd,gettext,json,xml,fpm,intl,zip} -y
          sudo rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
          sudo yum install mysql-community-server -y
          sudo systemctl enable mysqld
          sudo systemctl start mysqld
          sudo usermod -a -G apache ec2-user
          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          sudo find /var/www -type f -exec sudo chmod 0664 {} \;
          chown apache:apache -R /var/www/html
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          cp -r wordpress/* /var/www/html/
          cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
          # Edit the wp-config.php file here
          # nano /var/www/html/wp-config.php
          service httpd restart

  F_configure_private_server:
    needs: E_configure_EC2_instance
    runs-on: ubuntu-latest
    steps:
    - name: SSH into Private Server and Configure it
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.BASTION_HOST_PUBLIC_IP }}
        username: ec2-user
        key: ${{ needs.B_build.outputs.setup_server_private_key }}
        script: |
          ssh-add - <<< "${{ secrets.PEPPERONI_SETUP_SERVER_TF_KEY }}"
          ssh -A -i ${{ secrets.PEPPERONI_SETUP_SERVER_TF_KEY }} ec2-user@${{ env.BASTION_HOST_PUBLIC_IP }}
          ssh -i ${{ secrets.PEPPERONI_SETUP_SERVER_TF_KEY }} ec2-user@${{ env.BASTION_HOST_PRIVATE_IP }}

