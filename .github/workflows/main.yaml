name: Pepperoni Workflow
on:
  workflow_dispatch:

jobs:
  A_setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1 

  B_build: 
    needs: A_setup
    runs-on: ubuntu-latest
     
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init
      working-directory: WordPress Hosted on EC2

    - name: Terraform Format
      run: terraform fmt
      working-directory: WordPress Hosted on EC2

    - name: Terraform Validate
      run: terraform validate
      working-directory: WordPress Hosted on EC2

    - name: Terraform Plan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: terraform plan
      working-directory: WordPress Hosted on EC2

    - name: Terraform Apply
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: terraform apply -auto-approve -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: WordPress Hosted on EC2
        
    - name: Terraform Refresh
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: terraform refresh -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: WordPress Hosted on EC2
      
    - name: Terraform Output
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD_SECRET }}
      run: |
        echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "bh_public_ip=$(terraform output -raw bh_public_ip)" >> $GITHUB_ENV
        echo "setup_server_private_key=$(terraform output -raw setup_server_private_key)" >> $GITHUB_ENV
        echo "efs_id=$(terraform output -raw efs_id)" >> $GITHUB_ENV
        echo "az1_private_subnet_ec2_private_ip=$(terraform output -raw az1_private_subnet_ec2_private_ip)" >> $GITHUB_ENV
        echo "az2_private_subnet_ec2_private_ip=$(terraform output -raw az2_private_subnet_ec2_private_ip)" >> $GITHUB_ENV
        
      working-directory: WordPress Hosted on EC2

  C_install_gh_cli:
    needs: B_build
    runs-on: ubuntu-latest
    steps:
    - name: Install GitHub CLI
      run: |
        # Install GitHub CLI on the remote server
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
        sudo apt update
        sudo apt install gh

  D_authenticate_gh_cli:
    needs: C_install_gh_cli
    runs-on: ubuntu-latest
    steps:
    - name: Authenticate GitHub CLI
      run: |
        gh auth login --with-token <<< ${{ secrets.GH_TOKEN }}

  E_configure_EC2_instance:
    needs: D_authenticate_gh_cli
    runs-on: ubuntu-latest
    steps:
    - name: SSH into Setup Server, Mount EFS and Upload Docker Resources Folder
      uses: appleboy/ssh-action@master
      with:
        host: ${{ needs.B_build.outputs.public_ip }}
        username: ec2-user
        key: ${{ needs.B_build.outputs.setup_server_private_key }}
        script: |
          git clone https://github.com/AlexTNewell/tech-test.git
          sudo yum install -y amazon-efs-utils
          mkdir -p /var/www/docker_resources
          echo "$efs_id"
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport "$efs_id":/ /var/www/docker_resources
          sudo cp -r /home/ec2-user/tech-test/* /var/www/docker_resources
            
  F_configure_private_server:
    needs: E_configure_EC2_instance
    runs-on: ubuntu-latest
    steps:
    - name: SSH to Bastion Host and Forward Connection
      run:
        ssh -o "StrictHostKeyChecking=no" -i "${{ needs.B_build.outputs.setup_server_private_key }}" -N -L 2222:"${{az1_private_subnet_ec2_private_ip}}":22 ec2_user@bastion_host_public_ip
      env:
        BASTION_SSH_KEY: ${{ secrets.BASTION_SSH_KEY }}  # Add the bastion host's private key as a secret
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}  # Add the private EC2 instance's private key as a secret
    
    
    
    - name: SSH into Private Server and Configure it
      uses: appleboy/ssh-action@master
      with:
        host: ${{ needs.B_build.outputs.bh_public_ip }}
        username: ec2-user
        key: ${{ needs.B_build.outputs.setup_server_private_key }}
        script: |
          ssh-add - <<< "${{ needs.B_build.outputs.setup_server_private_key }}"
          ssh -A -i ${{ needs.B_build.outputs.setup_server_private_key }} ec2-user@${{ needs.B_build.outputs.bh_public_ip }}
          ssh -i ${{ needs.B_build.outputs.setup_server_private_key }} ec2-user@$${{ needs.B_build.outputs.bh_private_ip }}
          
          
          
          
              - name: SSH into Setup Server, Build Docker Image and Run Container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ needs.B_build.outputs.????? }}
        username: ec2-user
        key: ${{ needs.B_build.outputs.setup_server_private_key }}
        script: |
            cd tech-test
            docker build -t docker_image:latest --no-cache .
            docker run -d -p 80:80 -v /home/ec2-user/Pepperoni/docker_resources/sub:/www docker_image:latest

